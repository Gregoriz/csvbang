/**
 *  com.github.lecogiteur.csvbang.parser.CsvGrammarAction
 * 
 *  Copyright (C) 2013-2015  Tony EMMA
 *
 *  This file is part of Csvbang.
 *  
 *  Csvbang is a comma-separated values ( CSV ) API, written in JAVA and thread-safe.
 *
 *  Csvbang is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  any later version.
 *   
 *  Csvbang is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *   
 *  You should have received a copy of the GNU General Public License
 *  along with Csvbang. If not, see <http://www.gnu.org/licenses/>.
 */
package com.github.lecogiteur.csvbang.parser;

import com.github.lecogiteur.csvbang.exception.CsvBangException;

/**
 * Defined an action in CSV grammar. We can create new record, field or comment, ...
 * @author Tony EMMA
 * @version 1.0.0
 * @since 1.0.0
 */
public interface CsvGrammarAction<T> {
	
	/**
	 * Get type of action to do.
	 * @return the type of action
	 * @since 1.0.0
	 */
	public CsvGrammarActionType getType();
	
	/**
	 * Add a byte
	 * @param b a byte
	 * @throws CsvBangException if a problem occurred when we add a byte for action
	 * @since 1.0.0
	 */
	public void add(final byte b) throws CsvBangException;
	
	/**
	 * Add another word to action. This word is generated by the action.
	 * @param word an action which will be generated a word.
	 * @return True if word is added to the current action. Else the word is not added because, this action is complete.
	 * @throws CsvBangException if a problem occurred when we add a word for action
	 * @since 1.0.0
	 */
	public boolean add(final CsvGrammarAction<?> word) throws CsvBangException;
	
	/**
	 * Verify if the action is completed compared to the next action
	 * @param next the next action
	 * @return True if the action is completed and ready for execution
	 * @since 1.0.0
	 */
	public boolean isActionCompleted(final CsvGrammarActionType next);
	
	/**
	 * Verify if it's the last action of the CSV file. No action after this action to execute.
	 * @return True if it's the last action.
	 * @since 1.0.0
	 */
	public boolean isLastAction();
	
	/**
	 * Execute the action
	 * @return the result of action. Could be a word or another thing
	 * @throws CsvBangException if a problem occurred when we execute action
	 * @since 1.0.0
	 */
	public T execute() throws CsvBangException;
	
	/**
	 * Get the start offset in CSV file of action
	 * @return the start offset
	 * @since 1.0.0
	 */
	public long getStartOffset();
	
	/**
	 * Get the end offset in CSV file of action
	 * @return the end offset
	 * @since 1.0.0
	 */
	public long getEndOffset();
	
	/**
	 * Set the start offset in CSV file of action 
	 * @param offset the start offset
	 * @since 1.0.0
	 */
	public void setStartOffset(final long offset);
	
	/**
	 * Set the end offset in CSV file of action 
	 * @param offset the end offset
	 * @since 1.0.0
	 */
	public void setEndOffset(final long offset);
	
	/**
	 * True if the action can't have sub actions. (Example: Quote Action).
	 * In fact this action verify if the next action can be executed or must be considered like content
	 * @param next the next action detected
	 * @param keyword the current keyword
	 * @return true If this action is a chuck.
	 * @since 1.0.0
	 */
	public boolean isChuck(final CsvGrammarActionType next, final byte[] keyword);

}
